# -*- coding: utf-8 -*-
"""app5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XY9WwgsK59PsAaSiQONGH3ojFFwFgimL
"""

pip install streamlit

import pandas as pd
import numpy as np
from xgboost import XGBRegressor
import pickle
import streamlit as st

loaded_model = pickle.load(open("Bigmart_Project.sav","rb"))

def preprocess_data(data):
    # Label encoding
    from sklearn.preprocessing import LabelEncoder
    le = LabelEncoder()
    label_cols = ['Item_Fat_Content', 'Outlet_Size', 'Outlet_Location_Type']

    for col in label_cols:
        data[col] = le.fit_transform(data[col])

    return data

def main():
    st.title('BigMart Sales Prediction')

    # User inputs
    item_weight = st.text_input('Item Weight')
    item_fat_content = st.text_input('Item Fat Content')
    item_visibility = st.text_input('Item Visibility')
    item_type = st.text_input('Item Type')
    item_mrp = st.text_input('Item MRP')
    outlet_establishment_year = st.text_input('Outlet Establishment Year')
    outlet_size = st.text_input('Outlet Size')
    outlet_location_type = st.text_input('Outlet Location Type')
    outlet_type = st.text_input('Outlet Type')

    # Validate input and convert to appropriate data types
    try:
        item_weight = float(item_weight) if item_weight else None
        item_visibility = float(item_visibility) if item_visibility else None
        item_mrp = float(item_mrp) if item_mrp else None
        outlet_establishment_year = int(outlet_establishment_year) if outlet_establishment_year else None
    except ValueError:
        st.error('Please enter valid numeric values.')

    if st.button('Predict'):
        if None not in (item_weight, item_visibility, item_mrp, outlet_establishment_year):
            # Create a DataFrame with user inputs
            input_data = pd.DataFrame({
                'Item_Weight': [item_weight],
                'Item_Fat_Content': [item_fat_content],
                'Item_Visibility': [item_visibility],
                'Item_Type': [item_type],
                'Item_MRP': [item_mrp],
                'Outlet_Establishment_Year': [outlet_establishment_year],
                'Outlet_Size': [outlet_size],
                'Outlet_Location_Type': [outlet_location_type],
                'Outlet_Type': [outlet_type]
            })

            # Preprocess the user input data
            input_data = preprocess_data(input_data)

            # Make prediction
            y_pred_lr = loaded_model.predict(input_data)

            st.success(f'Predicted Sales: {y_pred_lr[0]:.2f}')

if __name__ == "__main__":
    main()

